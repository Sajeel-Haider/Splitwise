import {
  collection,
  addDoc,
  updateDoc,
  where,
  query,
  getDocs,
} from "firebase/firestore";

import { db } from "../../../../Firebase-config";

import "react-toastify/dist/ReactToastify.css";
import "./ModalAddExpenseWindow.scss";

const usersCollectionRef = collection(db, "users");
const expenseMembersCollectionRef = collection(db, "expense-members");
const loanCollectionRef = collection(db, "loan");
export const SplittedEquallyFunction = async (
  expenseData,
  authUser,
  navigate,
  setmodalExpenseWindow,
  members,
  autoGeneratedId_expense
) => {
  try {
    const splittedAmount =
      Number(expenseData.amount) / Number(members.length + 1);
    splittedAmount.toFixed(2);

    expenseData.memberDetails.map(async (member, index) => {
      const usersQuery = query(
        usersCollectionRef,
        where("email", "==", member.email)
      );
      const querySnapshotUsers = await getDocs(usersQuery);
      var userData;
      querySnapshotUsers.forEach(async (doc) => {
        userData = doc.data();
        await addDoc(expenseMembersCollectionRef, {
          exp_id: autoGeneratedId_expense,
          u_id: userData.u_id,
          amount: splittedAmount,
        });

        const docRef_loan = await addDoc(loanCollectionRef, {
          exp_id: autoGeneratedId_expense,
          u_id_lend: authUser.u_id,
          u_id_rec: userData.u_id,
          amount: splittedAmount,
        });

        const autoGeneratedId_loan = docRef_loan.id;
        await updateDoc(docRef_loan, { loan_id: autoGeneratedId_loan });
      });
      await addDoc(expenseMembersCollectionRef, {
        exp_id: autoGeneratedId_expense,
        u_id: authUser.u_id,
        amount: splittedAmount,
      });
    });

    setmodalExpenseWindow(false);
    navigate(`/dashboard/${authUser.u_id}`);
  } catch (error) {
    console.error("Error adding expense:", error);
  }
};
