import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";
import {
  collection,
  addDoc,
  updateDoc,
  where,
  query,
  getDocs,
} from "firebase/firestore";
import { format, isAfter } from "date-fns";
import { ToastContainer, toast } from "react-toastify";
import { ref, uploadBytes } from "firebase/storage";

import { db, storage } from "../../../../Firebase-config";

import { Button } from "../../../StyledComponents/Button-styles";
import "react-toastify/dist/ReactToastify.css";
import "./ModalAddExpenseWindow.scss";
import { useCallback } from "react";
import { SplittedEquallyFunction } from "./SplittedEquallyFunction";
import { SplittedUnequallyFunction } from "./SplittedUnequallyFunction";

export const ModalAddExpenseWindow = ({ setmodalExpenseWindow }) => {
  const [users, setUsers] = useState([]);
  const [authPaid, setauthPaid] = useState("");
  const [changeDistribution, setchangeDistribution] = useState(false);
  const [imageFile, setImageFile] = useState(null);
  const getCurrentDate = () => {
    return format(new Date(), "yyyy-MM-dd");
  };
  const [expenseData, setexpenseData] = useState({
    description: "",
    memberDetails: [{ id: 1, name: "", email: "", ppamount: "" }],
    amount: "",
    date: getCurrentDate(),
  });
  const navigate = useNavigate();
  const authUser = useSelector((state) => state.user);

  const usersCollectionRef = collection(db, "users");

  const notifyAmount = () => toast("Invalid Amount Balance");
  const notifyEmail = () => toast("Invalid Email or Email doesnot exist");
  const notifyDupEmail = () => toast("Duplicate emails are not valid");
  const notifyCalender = () => toast("Can't select the date above today");

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validEmailsInUsers = users.map((user) => user.email);
    const emailSet = new Set(validEmailsInUsers);
    var checkDuplicateEmail;
    if (emailSet.size !== validEmailsInUsers.length) {
      checkDuplicateEmail = true;
    } else {
      checkDuplicateEmail = false;
    }

    const checkIfExistsInExpenseData = expenseData.memberDetails.every(
      (member) => validEmailsInUsers.includes(member.email)
    );
    if (checkDuplicateEmail) {
      notifyDupEmail();
      return;
    }
    if (!checkIfExistsInExpenseData) {
      notifyEmail();
      return;
    }
    const members = expenseData.memberDetails.map((member) => {
      if (member.ppamount < 0) {
        notifyAmount();
        return {};
      }
      return {
        name: member.name,
        email: member.email,
        ppamount: member.ppamount,
      };
    });

    const hasNegativePpAmount = members.some(
      (member) => Object.keys(member).length === 0
    );
    if (hasNegativePpAmount) {
      notifyAmount();
      return;
    }
    const ppamountSum = members.reduce(
      (sum, member) => sum + parseFloat(member.ppamount || 0),
      0
    );
    if (Number(authPaid) < 0 || Number(expenseData.amount) <= 0) {
      notifyAmount();
      return;
    }
    const expensesCollectionRef = collection(db, "expenses");

    const docRef_expense = await addDoc(expensesCollectionRef, {
      description: expenseData.description,
      amount: expenseData.amount,
      date: expenseData.date,
    });

    const autoGeneratedId_expense = docRef_expense.id;
    await updateDoc(docRef_expense, { exp_id: autoGeneratedId_expense });

    if (imageFile !== null) {
      const imageRef = ref(storage, `images/${autoGeneratedId_expense}`);
      uploadBytes(imageRef, imageFile);
    }
    if (ppamountSum === 0) {
      SplittedEquallyFunction(
        expenseData,
        authUser,
        navigate,
        setmodalExpenseWindow,
        members,
        autoGeneratedId_expense
      );
    } else {
      if (
        Number(ppamountSum) + Number(authPaid) !==
        Number(expenseData.amount)
      ) {
        notifyAmount();
      } else {
        SplittedUnequallyFunction(
          expenseData,
          authUser,
          autoGeneratedId_expense,
          authPaid,
          setmodalExpenseWindow,
          navigate
        );
      }
    }
  };

  const handleDateChange = (e) => {
    const selectedDate = new Date(e.target.value);
    const today = new Date();
    if (isAfter(selectedDate, today)) {
      notifyCalender();
      setexpenseData({ ...expenseData, date: getCurrentDate() });
    } else {
      setexpenseData({ ...expenseData, date: e.target.value });
    }
  };

  const handleMemberEmailChange = (id, e) => {
    const updatedMemberDetails = expenseData.memberDetails.map((member) =>
      member.id === id ? { ...member, email: e.target.value } : member
    );
    setexpenseData({ ...expenseData, memberDetails: updatedMemberDetails });
  };

  const handlePpamountChange = (id, e) => {
    const updatedMemberDetails = expenseData.memberDetails.map((member) =>
      member.id === id ? { ...member, ppamount: e.target.value } : member
    );
    setexpenseData({ ...expenseData, memberDetails: updatedMemberDetails });
  };

  const handleImageChange = (e) => {
    const selectedFile = e.target.files[0];

    if (selectedFile && selectedFile.type.startsWith("image/")) {
      setImageFile(selectedFile);
    } else {
      setImageFile(null);
      toast.error("Please select a valid image file.");
    }
  };

  const fetchUsers = useCallback(async () => {
    try {
      const usersDb = query(
        usersCollectionRef,
        where("u_id", "!=", authUser.u_id)
      );
      const querySnapshotUsers = await getDocs(usersDb);
      const userData = querySnapshotUsers.docs.map((doc) => doc.data());

      setUsers(userData);
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  }, [usersCollectionRef]);
  useEffect(() => {
    fetchUsers();
  }, [usersCollectionRef]);

  return (
    <div className="addExpense-window-container">
      <form className="addExpense-form" onSubmit={handleSubmit}>
        <h2>Add an expense</h2>
        <input
          type="text"
          name="description"
          placeholder="Enter description"
          onChange={(e) =>
            setexpenseData({ ...expenseData, description: e.target.value })
          }
          required
        />
        <input
          type="number"
          name="amount"
          placeholder="$ 0.00"
          step="0.01"
          required
          onChange={(e) =>
            setexpenseData({ ...expenseData, amount: e.target.value })
          }
        />
        <input
          type="date"
          name="dateInput"
          required
          value={expenseData.date}
          onChange={handleDateChange}
        />
        <input
          type="file"
          name="imageInput"
          accept="image/*"
          onChange={handleImageChange}
        />
        {imageFile && imageFile.type.startsWith("image/") && (
          <p>Selected File: {imageFile.name}</p>
        )}

        <p>splitted equally</p>
        <span onClick={() => setchangeDistribution(!changeDistribution)}>
          wanna change distribution?
        </span>
        {changeDistribution && (
          <>
            <p>How much you paid?</p>
            <input
              type="number"
              placeholder="$ 0.00"
              onChange={(e) => setauthPaid(e.target.value)}
              required
            />
          </>
        )}
        {expenseData.memberDetails.map((member) => (
          <div className="input-div" key={member.id}>
            <input
              type="email"
              name="description"
              placeholder="Enter your friends email"
              onChange={(e) => handleMemberEmailChange(member.id, e)}
              required
            />
            {changeDistribution && (
              <input
                type="number"
                step="0.01"
                placeholder="$ 0.00"
                onChange={(e) => handlePpamountChange(member.id, e)}
                required
              />
            )}
          </div>
        ))}
        <Button
          type="button"
          onClick={() =>
            setexpenseData({
              ...expenseData,
              memberDetails: [
                ...expenseData.memberDetails,
                {
                  id: expenseData.memberDetails.length + 1,
                  name: "",
                  email: "",
                  ppamount: "",
                },
              ],
            })
          }
        >
          add people
        </Button>
        <span
          onClick={() =>
            expenseData.memberDetails.length > 1 &&
            setexpenseData({
              ...expenseData,
              memberDetails: expenseData.memberDetails.slice(0, -1),
            })
          }
        >
          remove
        </span>
        <br />
        <Button type="submit">Save</Button>
      </form>

      <ToastContainer />
    </div>
  );
};

export default ModalAddExpenseWindow;
